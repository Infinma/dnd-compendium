{"version":3,"sources":["lib/DataLoader.js","components/SpellComponent/Spell/Spell.js","components/SpellComponent/SpellList/SpellList.js","components/SpellComponent/SpellForm/SpellForm.js","components/SpellComponent/SpellContainer/SpellContainer.js","App.js","serviceWorker.js","index.js"],"names":["SpellData","Spells","Spell","formatClass","bind","formatDescription","formatLevel","classes","classList","i","toUpperCase","slice","toLowerCase","length","description","split","map","text","key","className","level","this","props","spell","id","name","type","casting_time","range","components","display","duration","descTags","levelFormat","onClick","displaySpell","raw","React","Component","SpellList","spellDivs","spellList","SpellForm","state","updateForm","submitForm","e","target","value","setState","filterSpell","preventDefault","onSubmit","placeholder","onChange","SpellContainer","fullSpellList","form","filter","includes","prevState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.800351af.chunk.js","sourcesContent":["import Spells from '../data/spells.json';\r\n\r\nexport function SpellData() {\r\n  return Spells;\r\n}\r\n","import React from 'react';\r\nimport './Spell.css';\r\n\r\nclass Spell extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.formatClass = this.formatClass.bind(this);\r\n    this.formatDescription = this.formatDescription.bind(this);\r\n    this.formatLevel = this.formatLevel.bind(this);\r\n  }\r\n\r\n  formatClass(classes) {\r\n    let classList = '';\r\n    for (let i in classes) {\r\n      classList += classes[i][0].toUpperCase() + classes[i].slice(1).toLowerCase();\r\n      if (i < classes.length - 1) {\r\n        classList += ', ';\r\n      }\r\n    }\r\n    return classList;\r\n  }\r\n\r\n  formatDescription(description) {\r\n    let descArr = description.split('\\n');\r\n    let descTags = descArr.map((text, i) => {\r\n      if (i === 0) {\r\n        return <p key={ i }><span className=\"descriptor\">Description:</span> { text }<br/></p>;\r\n      }\r\n      return <p key={ i }>{ text }<br/></p>;\r\n    })\r\n    return descTags;\r\n  }\r\n\r\n  formatLevel(level) {\r\n    if (level === 'cantrip') {\r\n      return level[0].toUpperCase() + level.slice(1);\r\n    }\r\n    return level;\r\n  }\r\n\r\n  render() {\r\n    let { id, name, type, casting_time, range, components, display,\r\n      duration, classes, description, level } = this.props.spell;\r\n    \r\n    let classList = this.formatClass(classes);\r\n    let descTags = this.formatDescription(description);\r\n    let levelFormat = this.formatLevel(level);\r\n    return (\r\n      <div className=\"spell-container\">\r\n        <div className=\"spell-header\" onClick={ () => this.props.displaySpell(id) }>\r\n          <ul>\r\n            <li className=\"spell-header-level\">{ levelFormat }</li>\r\n            <li>{ name }</li>\r\n          </ul>\r\n          <p className=\"toggle\">{ display ? '-' : '+' }</p>\r\n        </div>\r\n        <div className={ display ? 'spell-desc' : 'hidden' } >\r\n          <h1 className=\"main\">{ name }</h1>\r\n          <p className=\"type\">{ type }</p>\r\n          <p><span className=\"descriptor\">Casting Time:</span> { casting_time }</p>\r\n          <p><span className=\"descriptor\">Range:</span> { range }</p>\r\n          <p><span className=\"descriptor\">Components:</span> { components.raw }</p>\r\n          <p><span className=\"descriptor\">Duration:</span> { duration }</p>\r\n          <p><span className=\"descriptor\">Classes:</span> { classList }</p>\r\n          <br />\r\n          { descTags }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Spell;\r\n","import React from 'react';\r\nimport './SpellList.css';\r\nimport Spell from '../Spell/Spell';\r\n\r\nclass SpellList extends React.Component {\r\n\r\n  render() {\r\n    let spellDivs = this.props.spellList.map((spell) => {\r\n      return (\r\n        <Spell \r\n          key={ spell.id }\r\n          spell={ spell }\r\n          displaySpell={ this.props.displaySpell } \r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <div className=\"spell-list-header\">\r\n          <ul>\r\n            <li>Level</li>\r\n            <li>Spell</li>\r\n          </ul>\r\n        </div>\r\n        { spellDivs }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SpellList;\r\n","import React from 'react';\r\nimport './SpellForm.css';\r\n\r\nclass SpellForm extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: ''\r\n    }\r\n    this.updateForm = this.updateForm.bind(this);\r\n    this.submitForm = this.submitForm.bind(this);\r\n  }\r\n\r\n  updateForm(e) {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n    this.props.filterSpell({name: value});\r\n  }\r\n\r\n  submitForm(e) {\r\n    e.preventDefault();\r\n    this.props.filterSpell(this.state);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"spell-form\" >\r\n        <form onSubmit={ this.submitForm }>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={ this.state.name }\r\n            placeholder=\"Spell\"\r\n            onChange={ this.updateForm }\r\n          />\r\n          <button>Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SpellForm;\r\n","import React from 'react';\r\nimport { SpellData } from '../../../lib/DataLoader';\r\nimport SpellList from '../SpellList/SpellList';\r\nimport SpellForm from '../SpellForm/SpellForm';\r\n\r\nclass SpellContainer extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      fullSpellList: SpellData(),\r\n      spellList: SpellData()\r\n    };\r\n    this.displaySpell = this.displaySpell.bind(this);\r\n    this.filterSpell = this.filterSpell.bind(this);\r\n  }\r\n\r\n  filterSpell(form) {\r\n    this.setState(() => {\r\n      let filteredSpellList = this.state.fullSpellList.filter((spell) => {\r\n        let spellName = spell.name.toLowerCase();\r\n        return spellName.includes(form.name.toLowerCase());\r\n      })\r\n      return {\r\n        spellList: filteredSpellList\r\n      };\r\n    })\r\n  }\r\n\r\n  displaySpell(id) {\r\n    this.setState((prevState) => {\r\n      let displayedSpellList = prevState.spellList.map((spell) => {\r\n        if (id === spell.id) {\r\n          spell.display = !spell.display\r\n        }\r\n        return spell;\r\n      });\r\n      return {\r\n        spellList: displayedSpellList\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"spell-master-container\">\r\n        <SpellForm filterSpell={ this.filterSpell } />\r\n        <SpellList spellList={ this.state.spellList } displaySpell={ this.displaySpell } />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SpellContainer;\r\n","import React from 'react';\nimport './App.css';\nimport SpellContainer from './components/SpellComponent/SpellContainer/SpellContainer';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"app-container\" >\n        <SpellContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}